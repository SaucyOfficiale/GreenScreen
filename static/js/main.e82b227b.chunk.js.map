{"version":3,"sources":["vback.jpg","App.js","reportWebVitals.js","index.js"],"names":["App","webcamRef","useRef","canvasRef","useState","defaultImg","imageURL","setimageURL","onResults","results","a","img","document","getElementById","videoWidth","current","video","videoHeight","width","height","canvasElement","canvasCtx","getContext","save","clearRect","drawImage","image","globalCompositeOperation","segmentationMask","restore","useEffect","selfieSegmentation","SelfieSegmentation","locateFile","file","setOptions","modelSelection","camera","cam","onFrame","send","start","className","ref","style","display","transform","id","src","alt","htmlFor","accept","multiple","type","onChange","e","reader","FileReader","onload","readyState","result","readAsDataURL","target","files","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"+RAAe,G,MAAA,IAA0B,mC,OCqH1BA,EA/GH,WACV,IAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MACzB,EAAgCE,mBAASC,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAAS,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,sDACVC,EAAMC,SAASC,eAAe,eAC9BC,EAAab,EAAUc,QAAQC,MAAMF,WACrCG,EAAchB,EAAUc,QAAQC,MAAMC,YAE5Cd,EAAUY,QAAQG,MAAQJ,EAC1BX,EAAUY,QAAQI,OAASF,EAErBG,EAAgBjB,EAAUY,SAC1BM,EAAYD,EAAcE,WAAW,OAEjCC,OACVF,EAAUG,UAAU,EAAG,EAAGJ,EAAcF,MAAOE,EAAcD,QAC7DE,EAAUI,UAAUhB,EAAQiB,MAAO,EAAG,EAAGN,EAAcF,MAAOE,EAAcD,QAG5EE,EAAUM,yBAA2B,mBACrCN,EAAUI,UAAUhB,EAAQmB,iBAAkB,EAAG,EAAGR,EAAcF,MAAOE,EAAcD,QAIvFE,EAAUM,yBAA2B,mBACrCN,EAAUI,UAAUd,EAAK,EAAG,EAAGS,EAAcF,MAAOE,EAAcD,QAClEE,EAAUQ,UAvBM,4CAAH,sDA0BfC,qBAAU,WACR,IAAMC,EAAqB,IAAIC,qBAAmB,CAChDC,WAAY,SAACC,GACX,MAAM,+DAAN,OAAsEA,MAU1E,GANAH,EAAmBI,WAAW,CAC5BC,eAAgB,IAGlBL,EAAmBvB,UAAUA,GAGE,qBAAtBP,EAAUc,SACK,OAAtBd,EAAUc,QACV,CACA,IAAMsB,EAAS,IAAIC,SAAWrC,EAAUc,QAAQC,MAAO,CACrDuB,QAAQ,WAAD,4BAAE,sBAAA7B,EAAA,sEACDqB,EAAmBS,KAAK,CAAEd,MAAOzB,EAAUc,QAAQC,QADlD,2CAAF,kDAAC,GAGRE,MAAO,KACPC,OAAQ,MAGVkB,EAAOI,WAER,IAYH,OACE,mCACE,sBAAKC,UAAU,YAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,qBAAKA,UAAU,eAAf,SACE,sBAAKA,UAAU,QAAf,UACE,cAAC,IAAD,CACEC,IAAK1C,EACL2C,MAAO,CACLC,QAAS,OACT3B,MAAO,OACPC,OAAQ,OACR2B,UAAW,gBAGf,wBACEH,IAAKxC,EACLyC,MAAO,CACL1B,MAAO,OACPC,OAAQ,OACR2B,UAAW,uBAOrB,sBAAKJ,UAAU,sBAAf,UACE,qBAAKA,UAAU,cAAf,SACE,qBAAKK,GAAG,cAAcC,IAAK1C,EAAU2C,IAAI,aAAaP,UAAU,iBAElE,wBAAOQ,QAAQ,wBAAwBR,UAAU,cAAjD,UACE,uBAAOS,OAAO,UAAUJ,GAAG,wBAAwBK,UAAQ,EAACC,KAAK,OAAOC,SA1C7D,SAACC,GACpB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,WACY,IAAtBF,EAAOG,YACTpD,EAAYiD,EAAOI,SAGvBJ,EAAOK,cAAcN,EAAEO,OAAOC,MAAM,OAkC9B,gCC/FKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/D,SAASC,eAAe,SAM1BmD,M","file":"static/js/main.e82b227b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/vback.6540dd9d.jpg\";","import React, { useRef, useEffect, useState } from \"react\";\nimport Webcam from \"react-webcam\";\nimport { SelfieSegmentation } from \"@mediapipe/selfie_segmentation\";\nimport * as cam from \"@mediapipe/camera_utils\";\nimport './App.css';\nimport defaultImg from './vback.jpg'\nconst App = () => {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [imageURL, setimageURL] = useState(defaultImg);\n\n  const onResults = async (results) => {\n    const img = document.getElementById('vbackground')\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight;\n\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext(\"2d\");\n\n    canvasCtx.save();\n    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n    canvasCtx.drawImage(results.image, 0, 0, canvasElement.width, canvasElement.height);\n\n    // Only overwrite existing pixels.\n    canvasCtx.globalCompositeOperation = 'destination-atop';\n    canvasCtx.drawImage(results.segmentationMask, 0, 0, canvasElement.width, canvasElement.height);\n\n    // Only overwrite missing pixels.\n\n    canvasCtx.globalCompositeOperation = 'destination-over';\n    canvasCtx.drawImage(img, 0, 0, canvasElement.width, canvasElement.height);\n    canvasCtx.restore();\n  }\n\n  useEffect(() => {\n    const selfieSegmentation = new SelfieSegmentation({\n      locateFile: (file) => {\n        return `https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/${file}`;\n      },\n    });\n\n    selfieSegmentation.setOptions({\n      modelSelection: 1,\n    });\n\n    selfieSegmentation.onResults(onResults);\n\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null\n    ) {\n      const camera = new cam.Camera(webcamRef.current.video, {\n        onFrame: async () => {\n          await selfieSegmentation.send({ image: webcamRef.current.video });\n        },\n        width: 1280,\n        height: 720\n      });\n\n      camera.start();\n    }\n  }, []);\n\n  const imageHandler = (e) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      if (reader.readyState === 2) {\n        setimageURL(reader.result);\n      }\n    }\n    reader.readAsDataURL(e.target.files[0])\n  }\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"videoContainer\">\n          <div className=\"videoContent\">\n            <div className=\"video\">\n              <Webcam\n                ref={webcamRef}\n                style={{\n                  display: \"none\",\n                  width: \"100%\",\n                  height: \"100%\",\n                  transform: \"scaleX(-1)\"\n                }}\n              />\n              <canvas\n                ref={canvasRef}\n                style={{\n                  width: \"100%\",\n                  height: \"100%\",\n                  transform: \"scaleX(-1)\",\n                }}\n              ></canvas>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"backgroundContainer\">\n          <div className=\"backgrounds\">\n            <img id=\"vbackground\" src={imageURL} alt=\"The Screan\" className=\"background\" />\n          </div>\n          <label htmlFor=\"contained-button-file\" className=\"file-upload\">\n            <input accept=\"image/*\" id=\"contained-button-file\" multiple type=\"file\" onChange={imageHandler} />\n            Choose Background\n          </label>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}